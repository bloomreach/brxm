<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2014-2016 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0" sv:name="Update Image Sets">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:description" sv:type="String">
    <sv:value>Groovy script to update instances of image sets, reapplying the configuration from the gallery processor.</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:parameters" sv:type="String">
    <sv:value>{ "overwrite": true,
 "skipThumbnails" : true }</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>content/gallery//element(*, hippogallery:imageset)</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
    <sv:value>/*
 * Copyright 2014-2017 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.commons.io.IOUtils
import org.apache.jackrabbit.JcrConstants
import org.hippoecm.frontend.plugins.gallery.imageutil.ImageUtils
import org.hippoecm.frontend.plugins.gallery.imageutil.ScalingParameters
import org.hippoecm.frontend.plugins.gallery.processor.ScalingGalleryProcessor
import org.hippoecm.repository.api.HippoNodeType
import org.hippoecm.repository.gallery.HippoGalleryNodeType
import org.onehippo.repository.update.BaseNodeUpdateVisitor

import javax.jcr.Node
import javax.jcr.NodeIterator
import javax.jcr.RepositoryException
import javax.jcr.Session
import javax.jcr.query.Query
import javax.jcr.query.QueryManager
import javax.jcr.query.QueryResult

/**
 * Groovy script to update instances of image sets, reapplying the configuration from the gallery processor.
 * Per default, existing variants are overwritten and default thumbnails are skipped. This behavior is configurable.
 *
 * XPath query: content/gallery//element(*, hippogallery:imageset)
 *
 * Parameters: { "overwrite": true,
 *               "skipDefaultThumbnail" : true }
 */
class ImageSetUpdater extends BaseNodeUpdateVisitor {

    private static final String HIPPO_CONFIGURATION_GALLERY_PROCESSOR_SERVICE = "hippo:configuration/hippo:frontend/cms/cms-services/galleryProcessorService"

    protected static final String CONFIG_PARAM_WIDTH = "width"
    protected static final String CONFIG_PARAM_HEIGHT = "height"
    protected static final String CONFIG_PARAM_UPSCALING = "upscaling"
    protected static final String CONFIG_PARAM_OPTIMIZE = "optimize"
    protected static final String CONFIG_PARAM_COMPRESSION = "compression"

    protected static final Long DEFAULT_WIDTH = 0L
    protected static final Long DEFAULT_HEIGHT = 0L
    protected static final boolean DEFAULT_UPSCALING = false
    protected static final String DEFAULT_OPTIMIZE = "quality"
    protected static final double DEFAULT_COMPRESSION = 1.0

    // SCALING_STRATEGY_MAP copied from org.hippoecm.frontend.plugins.gallery.processor.ScalingGalleryProcessorPlugin
    private static final Map&lt;String, ImageUtils.ScalingStrategy&gt; SCALING_STRATEGY_MAP = new LinkedHashMap&lt;&gt;()
    static {
        SCALING_STRATEGY_MAP.put("auto", ImageUtils.ScalingStrategy.AUTO)
        SCALING_STRATEGY_MAP.put("speed", ImageUtils.ScalingStrategy.SPEED)
        SCALING_STRATEGY_MAP.put("speed.and.quality", ImageUtils.ScalingStrategy.SPEED_AND_QUALITY)
        SCALING_STRATEGY_MAP.put("quality", ImageUtils.ScalingStrategy.QUALITY)
        SCALING_STRATEGY_MAP.put("best.quality", ImageUtils.ScalingStrategy.BEST_QUALITY)
    }

    private final Map&lt;String, ScalingParameters&gt; imageVariantParameters = new HashMap&lt;String, ScalingParameters&gt;()
    private final Map&lt;String, List&lt;String&gt;&gt; imageSetVariants = new HashMap&lt;String, List&lt;String&gt;&gt;()

    private boolean overwrite = true
    private boolean skipDefaultThumbnail = true

    void initialize(Session session) throws RepositoryException {
        try {
            if (this.parametersMap["overwrite"] != null) {
                overwrite = parametersMap["overwrite"]
            }
            if (parametersMap["skipDefaultThumbnail"] != null) {
                skipDefaultThumbnail = parametersMap["skipDefaultThumbnail"]
            }

            Node configNode = session.getRootNode().getNode(HIPPO_CONFIGURATION_GALLERY_PROCESSOR_SERVICE)
            getImageVariantParametersFromProcessor(configNode)
            getImageSetVariantsFromNamespace(session)
        } catch (RepositoryException e) {
            log.error("Exception while retrieving image set variants configuration", e)
        }

        log.info "Initialized script ${this.getClass().getName()} with parameters: overwrite=${overwrite}, skipDefaultThumbnail=${skipDefaultThumbnail}"
    }

    boolean doUpdate(Node node) {
        try {
            return processImageSet(node)
        } catch (RepositoryException e) {
            log.error("Failed in generating image variants", e)
            node.getSession().refresh(false/*keepChanges*/)
        }
        return false
    }

    @Override
    boolean undoUpdate(final Node node) throws RepositoryException, UnsupportedOperationException {
        return false
    }

    private boolean processImageSet(Node node) throws RepositoryException {

        final List&lt;String&gt; imageSetVariants = imageSetVariants.get(node.getPrimaryNodeType().getName())
        if (imageSetVariants == null) {
            log.warn("Could not find image set {}, skipping processing node {}", node.getPrimaryNodeType().getName(), node.getPath())
            return false
        }

        Node data
        if (node.hasNode(HippoGalleryNodeType.IMAGE_SET_ORIGINAL)) {
            data = node.getNode(HippoGalleryNodeType.IMAGE_SET_ORIGINAL)
        } else {
            // hippogallery:thumbnail is the only mandatory image variant in hippogallery.cnd (not hippogalley:original!)
            data = node.getNode(HippoGalleryNodeType.IMAGE_SET_THUMBNAIL)
        }

        boolean processed = false
        for (String variantName : imageSetVariants) {
            processed = processed | processImageVariant(node, data, variantName)
        }

        return processed
    }

    private boolean processImageVariant(Node node, Node data, String variantName) throws RepositoryException {

        // original not to be reconfigured/regenerated so skip it
        if (HippoGalleryNodeType.IMAGE_SET_ORIGINAL == variantName) {
            log.debug "Skipping processing the original"
            return false
        }

        // thumbnail can be reconfigured, then only regenerate by parameter
        if ((HippoGalleryNodeType.IMAGE_SET_THUMBNAIL == variantName) &amp;&amp; skipDefaultThumbnail) {
           log.debug "Parameter skipDefaultThumbnail=true: skipping processing the default thumbnail variant"
           return false
        }

        final ScalingParameters parameters = imageVariantParameters.get(variantName)
        if (parameters == null) {
            log.warn("No parameters found for image variant {}. Skipping variant for node {}", variantName, node.path)
            return false
        }

        Node variant
        if (node.hasNode(variantName)) {
            if (!overwrite) {
                log.info("Parameter overwrite=false: skipping existing variant {} of node {}", variantName, node.path)
                return false
            }
            variant = node.getNode(variantName)
        } else {
            variant = node.addNode(variantName, HippoGalleryNodeType.IMAGE)
        }

        return createImageVariant(node, data, variant, parameters)
    }

    private boolean createImageVariant(Node node, Node data, Node variant, ScalingParameters parameters) throws RepositoryException {

        InputStream dataInputStream = null

        try {
            if (!data.hasProperty(JcrConstants.JCR_DATA)) {
                log.warn("Image variant {} for node {} does not have {} property. Variant not updated.",
                        variant.getName(), node.getPath(), JcrConstants.JCR_DATA)
                return false
            }

            dataInputStream = data.getProperty(JcrConstants.JCR_DATA).getBinary().getStream()
            String mimeType = data.getProperty(JcrConstants.JCR_MIMETYPE).getString()

            ScalingGalleryProcessor scalingGalleryProcessor = new ScalingGalleryProcessor()

            scalingGalleryProcessor.addScalingParameters(variant.getName(), parameters)
            scalingGalleryProcessor.initGalleryResource(variant, dataInputStream, mimeType, "", Calendar.getInstance())

            log.info("Image variant {} (re)generated for node {}", variant.getName(), node.getPath())
        } finally {
            IOUtils.closeQuietly(dataInputStream)
        }

        return true
    }

    private void getImageSetVariantsFromNamespace(Session session) throws RepositoryException {
        QueryManager queryManager = session.getWorkspace().getQueryManager()
        Query query = queryManager.createQuery("hippo:namespaces//element(*, hippogallery:imageset)", "xpath")
        QueryResult queryResult = query.execute()
        NodeIterator nodeIterator = queryResult.getNodes()

        // looking up fields of type hippogallery:image in the nodetype of a definition
        while (nodeIterator.hasNext()) {
            Node prototype = nodeIterator.nextNode()

            log.debug "Reading namespace configuration from prototype ${prototype.path}"

            Node doctype = prototype.getParent().getParent()
            Node nodetype
            String relNodeTypePath = HippoNodeType.HIPPOSYSEDIT_NODETYPE + "/" + HippoNodeType.HIPPOSYSEDIT_NODETYPE
            if (doctype.hasNode(relNodeTypePath)) {
                nodetype = doctype.getNode(relNodeTypePath)
            }
            else {
                log.warn "- No node ${relNodeTypePath} found below node ${prototype.path}: will not process this image set"
                continue
            }

            NodeIterator fields = nodetype.getNodes()

            List&lt;String&gt; imageVariants = new ArrayList&lt;String&gt;()

            while (fields.hasNext()) {
                Node field = fields.nextNode()

                // check image fields only (hipposysedit:type=hippogallery:image)
                if (field.hasProperty(HippoNodeType.HIPPOSYSEDIT_TYPE) &amp;&amp;
                        (HippoGalleryNodeType.IMAGE == field.getProperty(HippoNodeType.HIPPOSYSEDIT_TYPE).getString())) {

                    // read variant name from configuration, or construct namespace:field
                    String variantName = (field.hasProperty(HippoNodeType.HIPPO_PATH)) ?
                                            field.getProperty(HippoNodeType.HIPPO_PATH).getString() :
                                            doctype.getParent().getName() + ":" + field.getName()

                    // original not to be reconfigured/regenerated so skip it
                    if (HippoGalleryNodeType.IMAGE_SET_ORIGINAL == variantName) {
                        log.debug "- Skipping reading original variant from '${prototype.getPrimaryNodeType().getName()}' namespace"
                        continue
                    }

                    // thumbnail can be reconfigured, then only regenerate by parameter
                    if ((HippoGalleryNodeType.IMAGE_SET_THUMBNAIL == variantName) &amp;&amp; skipDefaultThumbnail) {
                        log.debug "- Parameter skipDefaultThumbnail=true: skipping reading default thumbnail variant from '${prototype.getPrimaryNodeType().getName()}' namespace"
                        continue
                    }

                    imageVariants.add(variantName)
                }
            }

            if (imageVariants.isEmpty()) {
                log.info "- Will not process image set '${prototype.getPrimaryNodeType().getName()}': no fields/variants found"
                continue
            }

            log.info "- Read image set '${prototype.getPrimaryNodeType().getName()}' from namespace with fields/variants '${imageVariants}'"
            imageSetVariants.put(prototype.getPrimaryNodeType().getName(), imageVariants)
        }
    }

    private void getImageVariantParametersFromProcessor(Node configNode) throws RepositoryException {
        log.debug "Reading processor configuration from ${configNode.path}"
        NodeIterator variantNodes = configNode.getNodes()

        while (variantNodes.hasNext()) {
            Node variantNode = variantNodes.nextNode()
            String variantName = variantNode.getName()

            // original not to be reconfigured/regenerated so skip it
            if (HippoGalleryNodeType.IMAGE_SET_ORIGINAL == variantName) {
                log.debug "- Skipping reading original variant configuration '${variantName}'"
                continue
            }

            // thumbnail can be reconfigured, then only regenerate by parameter
            if ((HippoGalleryNodeType.IMAGE_SET_THUMBNAIL == variantName) &amp;&amp; skipDefaultThumbnail) {
                log.debug "- Parameter skipDefaultThumbnail=true: skipping reading default thumbnail variant configuration '${variantName}'"
                continue
            }

            int width = variantNode.hasProperty(CONFIG_PARAM_WIDTH) ? variantNode.getProperty(CONFIG_PARAM_WIDTH).getLong() : DEFAULT_WIDTH
            int height = variantNode.hasProperty(CONFIG_PARAM_HEIGHT) ? variantNode.getProperty(CONFIG_PARAM_HEIGHT).getLong() : DEFAULT_HEIGHT

            if (width == 0 &amp;&amp; height == 0) {
                log.warn "- Stopping reading image set variant '${variantName}' from processor because width and height are both 0"
                continue
            }

            boolean upscaling = variantNode.hasProperty(CONFIG_PARAM_UPSCALING) ?
                    variantNode.getProperty(CONFIG_PARAM_UPSCALING).boolean : DEFAULT_UPSCALING
            String optimize = variantNode.hasProperty(CONFIG_PARAM_OPTIMIZE) ?
                    variantNode.getProperty(CONFIG_PARAM_OPTIMIZE).string : DEFAULT_OPTIMIZE
            float compression = variantNode.hasProperty(CONFIG_PARAM_COMPRESSION) ?
                    variantNode.getProperty(CONFIG_PARAM_COMPRESSION).double : DEFAULT_COMPRESSION

            ImageUtils.ScalingStrategy strategy = SCALING_STRATEGY_MAP.get(optimize)
            if (strategy == null) {
                log.warn "- Image variant '${variantName}' specifies an unknown scaling optimization strategy " +
                        "'${optimize}'. Possible values are ${SCALING_STRATEGY_MAP.keySet()}. Falling back to" +
                        " '${DEFAULT_OPTIMIZE}' instead."
                strategy = SCALING_STRATEGY_MAP.get(DEFAULT_OPTIMIZE)
            }

            ScalingParameters parameters = new ScalingParameters(width.intValue(), height.intValue(), upscaling, strategy, compression)
            log.info "- Read image set variant '${variantName}' from processor with scalingParameters '${parameters}'"

            imageVariantParameters.put(variantName, parameters)
        }
    }
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>1000</sv:value>
  </sv:property>
</sv:node>
