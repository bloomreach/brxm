Tests are divided between regular tests and integration tests,
the difference being the amount of time they take to execute.

Running 'mvn clean install' runs only the regular tests.
Run:

  mvn clean install -Pintegration

to run the integration tests as well.

Tests can be run against different databases using profiles.
There are predefined profiles for h2, mysql, mssql, postgresql
and oracle.
Run:

  mvn test -Ph2

to run the regular tests against h2.
Run:

  mvn verify -Pintegration,h2

to run both regular and integration tests against h2.

Besides the h2 database profile, the other database profiles
use a predefined database host, port, name, user and password
all of which can be overridden on the commandline using one or
a combination of the following parameters:
  -Ddb.host=<host>
  -Ddb.port=<port>
  -Ddb.name=<name>
  -Ddb.user=<user>
  -Ddb.password=<password

The mysql configuration assumes a mysql database called jcr
running on localhost, port 3306, and uses user root without
a password which has read/write privileges.
The mysql profile also will drop and recreate this database
when executing: mvn clean -Pmysql

For other database, please create/drop (clean) the used
database manually between executions.

For Oracle, the jdbc driver cannot automatically be downloaded
from Maven Central but needs to be manually downloaded from
Oracle technetwork to accept their licence terms, e.g. from:

  http://www.oracle.com/technetwork/database/features/jdbc/jdbc-ucp-122-3110062.html

and thereafter installed in your local repository, using:

  mvn install:install-file -Dfile={Path/to/your/ojdbc8.jar} -DgroupId=com.oracle.jdbc -DartifactId=ojdbc8 -Dversion=12.2.0.1 -Dpackaging=jar

Note on StampedeTest:
StampedeTest is a load test on the repository. It starts
a bunch of threads that execute a random set of actions
on the repository continually for a configured amount of time.
For instance:

  mvn test -Dtest=StampedeTest -Ph2 -Dstampede.minutes=3 -Dstampede.threads=5

executes the StampedeTest against h2 for a period of 3 minutes with 5
concurrent threads.

Note on running StampedeTest clustered:
There are two predefined profiles for running the StampedeTest
in a clustered setup using (only) mysql as the backing database.
Open two console windows for the current directory.

In the one run with profile -Pclusternode1:

  mvn test -Dtest=StampedeTest -Pclusternode1 -Dstampede.minutes=1 -Dstampede.threads1 -Dsurefire.forkmode=none -Dstampede.prompt=true

In the other run with profile -Pclusternode2:

  mvn test -Dtest=StampedeTest -Pclusternode2 -Dstampede.minutes=1 -Dstampede.threads1 -Dsurefire.forkmode=none -Dstampede.prompt=true

After the test case setup phase you will be prompted to press
enter to continue. This is to make sure the tests run concurrently
the whole time.

Note that because of the forkmode=none option the repository needs to have been
bootstrapped during a previous normal run because not all extensions
seem to be loaded in this mode.

You may leave out the '-Dsurefire.forkmode=none -Dstampede.prompt=true'
part but this will not allow you to coordinate the concurrency, which may
be important if you are doing performance measurements.