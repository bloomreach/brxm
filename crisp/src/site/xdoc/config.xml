<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2017 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Configuring CRISP Addon</title>
  </properties>
  <body>

    <section name="Configuring CRISP Addon">

      <subsection name="Introduction">
        <p>
          <strong>CRISP</strong> configurations are maintained in repository by default in the location at
          <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig</code>, like the following
          example (in System View XML format):
        </p>
        <div class="brush: xml">
          <source><![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <sv:node sv:name="hippo:moduleconfig" xmlns:sv="http://www.jcp.org/jcr/sv/1.0">
    <sv:property sv:name="jcr:primaryType" sv:type="Name">
      <sv:value>crisp:moduleconfig</sv:value>
    </sv:property>
    <sv:node sv:name="crisp:resourceresolvercontainer">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>crisp:resourceresolvercontainer</sv:value>
      </sv:property>
      <!-- An example ResourceResolver configuration child node for 'demoProductCatalogs' resource space. -->
      <sv:node sv:name="demoProductCatalogs">
        <sv:property sv:name="jcr:primaryType" sv:type="Name">
          <sv:value>crisp:resourceresolver</sv:value>
        </sv:property>
        <sv:property sv:name="crisp:beandefinition" sv:type="String">
          <sv:value>
            <!-- XML Bean definition here for a ResourceResolver for the resource space, 'demoProductCatalogs'. -->
          </sv:value>
        </sv:property>
        <sv:property sv:multiple="true" sv:name="crisp:propnames" sv:type="String">
          <sv:value>example.commerce.api.base.uri</sv:value>
        </sv:property>
        <sv:property sv:multiple="true" sv:name="crisp:propvalues" sv:type="String">
          <sv:value>http://localhost:8080/example-commerce/api/v1</sv:value>
        </sv:property>
      </sv:node>
    </sv:node>
  </sv:node>
          ]]></source>
        </div>
        <p>
          You can bootstrap configurations into the node, or you can update the configuration there at runtime.
          Any changes at runtime will be affected right away.
        </p>
        <p>
          Before going further, let's take a look at how the configuration nodes are structured:
        </p>
        <ul>
          <li>
            The <strong>CRISP</strong> module configuration node at <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig</code>
            must be of primary node type, <code>crisp:moduleconfig</code>.
          </li>
          <li>
            The <strong>CRISP</strong> module configuration node has single child node named <code>crisp:resourceresolvercontainer</code>
            of primary node type, <code>crisp:resourceresolvercontainer</code>, that may contain zero or multiple
            child node(s) specifying <code>ResourceResolver</code>s, which primary node type is <code>crisp:resourceresolver</code>,
            for each <strong><i>resource space</i></strong> underneath.
            So, in the example shown above, there is only one <code>ResourceResolver</code> configuration for a resource
            named <code>demoProductCatalogs</code> which is going to be used when invoking <code>ResourceServiceBroker</code> APIs.
          </li>
          <li>
            A <code>ResourceResolver</code> configuration node under <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer</code>
            must be of primary node type, <code>crisp:resourceresolver</code>.
          </li>
          <li>
            A <code>ResourceResolver</code> configuration node (of primary node type, <code>crisp:resourceresolver</code>)
            could have <code>crisp:propnames (string multiple)</code>, <code>crisp:propvalues (string multiple)</code>
            and <code>crisp:beandefinition (string)</code> properties.
          </li>
          <li>
            <code>crisp:propnames (string multiple)</code> and <code>crisp:propvalues (string multiple)</code>
            properties define pairs of variable property names and values to be interpolated in the <code>crisp:beandefinition (string)</code>
            property value. So, a management UI tool may possibly let administrator edit those pairs of variable properties
            without having to expose the XML bean definition in <code>crisp:beandefinition (string)</code> property directly.
          </li>
          <li>
            <code>crisp:beandefinition (string)</code> property defines Spring Framework Bean definition for a
            <code>ResourceResolver</code> bean in XML format.
            Find the example bootstrap configurations for details in the demo project.
          </li>
        </ul>
      </subsection>

      <subsection name="Adding a ResourceResolver configuration for a new resource space">
        <p>
          By default, there is no <code>ResourceResolver</code> configuration under
          <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer</code>.
          You can add <code>ResourceResolver</code> configuration nodes there for your backend services.
        </p>
        <p>
          For example, if you want to add a new resource space, 'demoProductCatalogs', then you should add a node
          by the resource space name, 'demoProductCatalogs'
          (ie, <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer/demoProductCatalogs</code>).
          And the 'demoProductCatalogs' can look like the following example (in System View XML format):
        </p>
        <div class="brush: xml">
          <source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sv:node sv:name="demoProductCatalogs" xmlns:sv="http://www.jcp.org/jcr/sv/1.0"&gt;
  &lt;sv:property sv:name="jcr:primaryType" sv:type="Name"&gt;
    &lt;sv:value>crisp:resourceresolver&lt;/sv:value&gt;
  &lt;/sv:property>
  &lt;sv:property sv:name="crisp:beandefinition" sv:type="String"&gt;
    &lt;sv:value>&lt;!&#91;CDATA&#91;&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"&gt;

  &lt;bean parent="abstractCrispSimpleJacksonRestTemplateResourceResolver"
        class="org.onehippo.cms7.crisp.core.resource.jackson.SimpleJacksonRestTemplateResourceResolver"&gt;
    &lt;property name="baseUri" value="${example.commerce.api.base.uri}" /&gt;
    &lt;property name="restTemplate"&gt;
      &lt;bean class="org.springframework.web.client.RestTemplate"&gt;
        &lt;property name="requestFactory" ref="org.springframework.http.client.ClientHttpRequestFactory" /&gt;
      &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="resourceLinkResolver"&gt;
      &lt;bean class="org.onehippo.cms7.crisp.core.resource.FreemarkerTemplateResourceLinkResolver"&gt;
        &lt;property name="templateSource"&gt;
          &lt;value>http://www.example.com/products/${(preview == "true")?then("staging", "current")}/sku/${resource.valueMap['SKU']!"unknown"}/overview.html&lt;/value&gt;
        &lt;/property&gt;
      &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="resourceDataCache"&gt;
      &lt;bean class="org.onehippo.cms7.crisp.core.resource.SpringResourceDataCache"&gt;
        &lt;constructor-arg&gt;
          &lt;bean class="org.springframework.cache.ehcache.EhCacheCache"&gt;
            &lt;constructor-arg&gt;
              &lt;bean parent="abstractCrispResourceEhCache"&gt;
                &lt;property name="cacheName" value="demoProductCatalogsCache" /&gt;
                &lt;property name="maxEntriesLocalHeap" value="1000" /&gt;
                &lt;property name="maxEntriesLocalDisk" value="0" /&gt;
                &lt;property name="timeToLiveSeconds" value="60" /&gt;
                &lt;property name="timeToIdleSeconds" value="60" /&gt;
              &lt;/bean&gt;
            &lt;/constructor-arg&gt;
          &lt;/bean&gt;
        &lt;/constructor-arg&gt;
      &lt;/bean&gt;
    &lt;/property&gt;
  &lt;/bean&gt;

&lt;/beans&gt;
    &#93;&#93;&gt;&lt;/sv:value&gt;
  &lt;/sv:property&gt;
  &lt;sv:property sv:multiple="true" sv:name="crisp:propnames" sv:type="String"&gt;
    &lt;sv:value&gt;example.commerce.api.base.uri&lt;/sv:value&gt;
  &lt;/sv:property&gt;
  &lt;sv:property sv:multiple="true" sv:name="crisp:propvalues" sv:type="String"&gt;
    &lt;sv:value>http://localhost:8080/example-commerce/api/v1&lt;/sv:value&gt;
  &lt;/sv:property&gt;
&lt;/sv:node&gt;
          </source>
        </div>

        <p>
          The example configuration shown above is going to add a <code>ResourceResolver</code> configuration node
          named <code>demoProductCatalogs</code> which is used as <strong>resource space</strong> name when invoking
          <code>ResourceServiceBroker</code> API.
        </p>

      </subsection>

      <subsection name="ResourceResolver Bean Definition">

        <p>
          In the example configuration in the previous section, basically the <code>ResourceResolver</code> component
          will be instantiated and registered for <code>demoProductCatalogs</code> <strong>resource space</strong>
          name by the <code>crisp:beandefinition</code> property configuration in Spring Framework Bean XML configuration.
        </p>

        <p>
          <strong><em>Note:</em></strong> <strong>CRISP Core</strong> will create a child <code>ApplicationContext</code>
          from the XML beans configuration in the <code>crisp:beandefinition</code> property and simply get a bean
          of type, <code>org.onehippo.cms7.crisp.api.resource.ResourceResolver</code>, to register the bean for
          the <strong>resource space</strong>, the name of which is specified by the <code>ResourceResolver</code>
          configuration node name. Therefore, you don't have to set <code>id</code> attribute of the <code>ResourceResolver</code>
          bean definition.
        </p>

        <p>
          The <code>crisp:beandefinition</code> property configuration could be interpolated by the variables
          set by pairs of <code>crisp:propnames</code> and <code>crisp:propvalues</code> properties, which possibly
          enables a management UI to be able to give administrator ability to configure those configuration parameters
          without having to look into <code>crisp:beandefinition</code> XML bean configuration in detail in most
          cases.
        </p>

        <p>
          In the example in the previous section, the <code>ResourceResolver</code> component is configured by the
          bean definition with <code>class="org.onehippo.cms7.crisp.core.resource.jackson.SimpleJacksonRestTemplateResourceResolver"</code>.
          <code>SimpleJacksonRestTemplateResourceResolver</code> is a <code>ResourceResolver</code> implementation
          that handles any JSON-based REST APIs in a generic way.
          Also, please note that the <code>ResourceResolver</code> bean has <code>parent="abstractCrispSimpleJacksonRestTemplateResourceResolver"</code>,
          which means the bean definition inherits all the common features provided by <strong>CRISP</strong> module library
          by the "parent" bean definition.
          If possible, it is a good practice to inherits an <i>abstract</i> bean definitions of <strong>CRISP</strong> module library
          to inherit all the goodness provided by the <strong>CRISP</strong> library wherever possible.
          For your information, the following <i>abstract</i> bean definitions for <code>ResourceResolver</code> components
          are defined by default.
        </p>

        <div class="brush: xml">
          <source><![CDATA[
  <!-- SNIP -->

  <!-- Basic HTTP Client Enabled Abstract Base Bean Definition -->
  <bean id="abstractCrispHttpRequestResourceResolver" abstract="true">
    <property name="clientHttpRequestFactory"
              ref="org.springframework.http.client.ClientHttpRequestFactory" />
  </bean>

  <!-- Basic Cache-enabled HTTP Client Enabled Abstract Base Bean Definition -->
  <bean id="abstractCrispSimpleRestTemplateResourceResolver" abstract="true"
        parent="abstractCrispHttpRequestResourceResolver">
    <property name="cacheEnabled" value="true" />
  </bean>

  <!-- Basic Cache-enabled JSON Supporting (Jackson Library based) HTTP Client Enabled Abstract Base Bean Definition -->
  <bean id="abstractCrispSimpleJacksonRestTemplateResourceResolver" abstract="true"
        parent="abstractCrispSimpleRestTemplateResourceResolver">
  </bean>

  <!-- SNIP -->
          ]]></source>
        </div>

      </subsection>

    </section>

  </body>
</document>
