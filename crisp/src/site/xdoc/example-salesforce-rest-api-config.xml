<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2017 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Example with SalesForce REST API</title>
  </properties>
  <body>

    <section name="Example with SalesForce REST API">

      <subsection name="Introduction">

        <p>
          The following <code>ResourceResolver</code> bean definition is an example configuration for SalesForce
          REST API backend. This will give hints on how to configure conneciton information, <code>RestTemplate</code>
          object configuration, authentication such as OAuth2, <code>ResourceLinkResolver</code> object configuration,
          cache control configuration, etc.
        </p>

        <p>
          The following ResourceResolver Spring Framework Beans configuration can be set at
          <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer/demoSalesForce/@crisp:beandefinition</code>
          property in the repository for "demoSalesForce" resource space, for instance.
        </p>

      </subsection>

      <subsection name="ResourceResolver Configuration">

        <div class="brush: xml">
          <source><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:s="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
                        http://www.springframework.org/schema/security
			            https://www.springframework.org/schema/security/spring-security.xsd
                        http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util.xsd">

  <bean parent="abstractCrispSimpleJacksonRestTemplateResourceResolver"
        class="org.onehippo.cms7.crisp.core.resource.jackson.SimpleJacksonRestTemplateResourceResolver">
    <property name="baseUri" value="${salesforce.baseUrl}/services/data/v20.0" />
    <property name="resourceDataCache">
      <bean class="org.onehippo.cms7.crisp.core.resource.SpringResourceDataCache">
        <constructor-arg>
          <bean class="org.springframework.cache.ehcache.EhCacheCache">
            <constructor-arg>
              <bean parent="abstractCrispResourceEhCache">
                <property name="cacheName" value="demoSalesForceCache" />
                <property name="maxEntriesLocalHeap" value="1000" />
                <property name="maxEntriesLocalDisk" value="0" />
                <property name="timeToLiveSeconds" value="60" />
                <property name="timeToIdleSeconds" value="60" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
      </bean>
    </property>
    <property name="clientHttpRequestInterceptor">
      <list value-type="org.springframework.http.client.ClientHttpRequestInterceptor">
        <bean class="org.onehippo.cms7.crisp.core.interceptor.SimpleOAuth2AuthorizedClientInterceptor" autowire="constructor">
          <property name="authorizedClientService" ref="authorizedClientService" />
          <property name="clientRegistrationId" value="salesforce-login" />
          <property name="contextAttributesMap" ref="credentials" />
        </bean>
      </list>
    </property>
  </bean>
  <util:map id="credentials" map-class="java.util.HashMap">
      <entry key="org.springframework.security.oauth2.client.OAuth2AuthorizationContext.USERNAME">
          <value>${salesforce.username}</value>
      </entry>
      <entry key="org.springframework.security.oauth2.client.OAuth2AuthorizationContext.PASSWORD">
          <value>${salesforce.password}</value>
      </entry>
  </util:map>

  <s:client-registrations>
      <s:client-registration registration-id="salesforce-login"
                             client-id="<salesforce.clientId>"
                             client-secret="<salesforce.clientSecret>"
                             client-authentication-method="post"
                             authorization-grant-type="password"
                             provider-id="salesforce"/>
      <s:provider provider-id="salesforce"
                  authorization-uri="<salesforce.baseUrl>/services/oauth2/token"
                  token-uri="<salesforce.baseUrl>/services/oauth2/token"/>
  </s:client-registrations>
  <bean id="authorizedClientService"
        class="org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService"
        autowire="constructor"/>

  <bean id="authorizedClientRepository"
        class="org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository">
    <constructor-arg ref="authorizedClientService"/>
  </bean>

</beans>
            ]]>
          </source>
        </div>

        <p>
          The following properties are used in the bean configuration through pairs of
          <code>crisp:propnames</code> and <code>crisp:propvalues</code> properties
          at <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer/demoSalesForce</code>
          node for "demoSalesForce" resource space, for instance.
        </p>

        <table>
          <thead>
            <tr>
              <th>Property Name</th>
              <th>Example Value</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>salesforce.clientId</td>
              <td>someClientId</td>
            </tr>
            <tr>
              <td>salesforce.clientSecret</td>
              <td>someClientSecret</td>
            </tr>
            <tr>
              <td>salesforce.username</td>
              <td>john.doe@example.com</td>
            </tr>
            <tr>
              <td>salesforce.password</td>
              <td>somePassword</td>
            </tr>
            <tr>
              <td>salesforce.securityToken</td>
              <td>someSecurityToken</td>
            </tr>
            <tr>
              <td>salesforce.baseUrl</td>
              <td>https://na1.salesforce.com</td>
            </tr>
          </tbody>
        </table>

        <ul>
          <li>
            <code>baseUri</code> property is to set the base URI of the backend SalesForce REST API.
            So, invocations on <code>ResourceServiceBroker</code> for this <strong>resource space</strong>
            will take a relative resource path to combine it with the base URI to invoke the backend SalesForce REST API in the end.
          </li>
          <li>
            <code>resourceDataCache</code> property specifies a <code>ResourceResolver</code> specific
            <code>ResourceDataCache</code> object. If this property is set and the specific resource is cacheable,
            the <code>ResourceServiceBroker</code> may cache resource specific data in the specified <code>ResourceDataCache</code>.
            If not set but the specific resource is still cacheable, <code>ResourceServiceBroker</code>
            may cache resource specific data in a globally-shared <code>ResourceDataCache</code> by default.
          </li>
          <li>
            Finally, <code>clientHttpRequestInterceptor</code> property specifies a <code>SimpleOAuth2AuthorizedClientInterceptor</code> object.
            In this example, because the SalesForce REST API backend requires OAuth2 authentication, a OAuth2 client needs
            to be registered in the <code>OAuth2AuthorizedClientRepository</code> with all the necessary OAuth2 authentication information.
            Please note that the <a href="https://github.com/spring-projects/spring-security-oauth"> spring-security-oauth2 </a>
            project is deprecated and the related libraries will be removed in the next versions
          </li>
        </ul>

      </subsection>

    </section>

  </body>
</document>
