<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2017 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Example with Simple JSON REST API</title>
  </properties>
  <body>

    <section name="Example with Simple JSON REST API">

      <subsection name="Introduction">

        <p>
          The following example <code>ResourceResolver</code> bean definition will give hints on how to configure
          conneciton information, <code>RestTemplate</code> object configuration, <code>ResourceLinkResolver</code>
          object configuration, cache control configuration, etc.
        </p>

        <p>
          The following ResourceResolver Spring Framework Beans configuration can be set at
          <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer/demoProductCatalogs/@crisp:beandefinition</code>
          property in the repository for "demoProductCatalogs" resource space, for instance.
        </p>

      </subsection>

      <subsection name="ResourceResolver Configuration">

        <p>
          Suppose you have a backend REST API having a URL pattern, <code>http://localhost:8080/example-commerce/api/v1/products/*</code>,
          to be able to retrieve product data in JSON format.
          You can simply configure a <code>ResourceResolver</code> with <code>SimpleJacksonRestTemplateResourceResolver</code>
          to pass the result JSON data as <code>Resource</code> object(s) to the application and its templates like the following example.
          For more details, please see the <a href="apidocs/index.html">JavaDocs</a>.
        </p>

        <div class="brush: xml">
          <source><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

  <bean parent="abstractCrispSimpleJacksonRestTemplateResourceResolver"
        class="org.onehippo.cms7.crisp.core.resource.jackson.SimpleJacksonRestTemplateResourceResolver">
    <property name="baseUri" value="${example.commerce.api.base.uri}" />
    <property name="restTemplate">
      <bean class="org.springframework.web.client.RestTemplate">
        <property name="requestFactory" ref="org.springframework.http.client.ClientHttpRequestFactory" />
      </bean>
    </property>
    <property name="resourceLinkResolver">
      <bean class="org.onehippo.cms7.crisp.core.resource.FreemarkerTemplateResourceLinkResolver">
        <property name="templateSource">
          <value>http://www.example.com/products/${(preview == "true")?then("staging", "current")}/sku/${resource.valueMap['SKU']!"unknown"}/overview.html</value>
        </property>
      </bean>
    </property>
    <property name="resourceDataCache">
      <bean class="org.onehippo.cms7.crisp.core.resource.SpringResourceDataCache">
        <constructor-arg>
          <bean class="org.springframework.cache.ehcache.EhCacheCache">
            <constructor-arg>
              <bean parent="abstractCrispResourceEhCache">
                <property name="cacheName" value="demoProductCatalogsCache" />
                <property name="maxEntriesLocalHeap" value="1000" />
                <property name="maxEntriesLocalDisk" value="0" />
                <property name="timeToLiveSeconds" value="60" />
                <property name="timeToIdleSeconds" value="60" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
      </bean>
    </property>
  </bean>

</beans>
            ]]>
          </source>
        </div>

        <p>
          The following properties are used in the bean configuration through pairs of
          <code>crisp:propnames</code> and <code>crisp:propvalues</code> properties
          at <code>/hippo:configuration/hippo:modules/crispregistry/hippo:moduleconfig/crisp:resourceresolvercontainer/demoProductCatalogs</code>
          node for "demoProductCatalogs" resource space, for instance.
        </p>

        <table>
          <thead>
            <tr>
              <th>Property Name</th>
              <th>Example Value</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>example.commerce.api.base.uri</td>
              <td>http://localhost:8080/example-commerce/api/v1</td>
            </tr>
          </tbody>
        </table>

        <ul>
          <li>
            <code>baseUri</code> property is to set the base URI of the backend REST API.
            So, invocations on <code>ResourceServiceBroker</code> for this <strong>resource space</strong>
            will take a relative resource path to combine it with the base URI to invoke the backend service in the end.
          </li>
          <li>
            <code>restTemplate</code> property is to set a Spring Framework <code>RestTemplate</code> object.
            In this simple example, because we don't need any authentication against the backend REST API, it simply
            set an instance of <code>org.springframework.web.client.RestTemplate</code>.
            <code>org.springframework.http.client.ClientHttpRequestFactory</code> is the default <code>requestFactory</code>
            bean definition in <strong>CRISP</strong> module library.
          </li>
          <li>
            <code>resourceLinkResolver</code> is a property to set a custom <code>ResourceLinkResolver</code> component
            for this <code>ResourceResolver</code>.
            Because content or data from an external service is not something that we can generate URI links automatically
            unlike content documents, the URI links must be generated in a custom way if needed.
            You can add a custom <code>ResourceLinkResolver</code> in this property to generate a URI link for an external
            content or data item.
            For your convenience, <strong>CRISP</strong> module library has shipped with a generic Freemarker template based
            custom resource link resolver component, <code>org.onehippo.cms7.crisp.core.resource.FreemarkerTemplateResourceLinkResolver</code>,
            with which you can use templating technique to generate a URI string with a given <code>resource</code> object.
          </li>
          <li>
            Finally, <code>resourceDataCache</code> property specifies a <code>ResourceResolver</code> specific
            <code>ResourceDataCache</code> object. If this property is set and the specific resource is cacheable,
            the <code>ResourceServiceBroker</code> may cache resource specific data in the specified <code>ResourceDataCache</code>.
            If not set but the specific resource is still cacheable, <code>ResourceServiceBroker</code>
            may cache resource specific data in a globally-shared <code>ResourceDataCache</code> by default.
          </li>
        </ul>

      </subsection>

    </section>

  </body>
</document>
