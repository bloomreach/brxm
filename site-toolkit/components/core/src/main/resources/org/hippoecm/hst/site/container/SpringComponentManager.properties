#
#  Copyright 2008-2020 Hippo B.V. (http://www.onehippo.com)
#
#  Licensed under the Apache License, Version 2.0 (the  "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS"
#  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# Default properties. The following properties will be overriden by external properties. e.g., hst-config.properties.
development.mode = false

# \uFFFF will be translated to a char, which you cannot write as String: Hence
# a good default delimiter
repository.pool.user.name.separator = \uFFFF

# if query parameters (for example 'page' parameter) should not be namespaced (eg r1_r2_r1:page),
# set the parameter below to true. Note that developers then should keep parameter collisions between
# components in mind
parameter.namespace.ignored = false

# default component class so you can set project specific values for each component
# without having to set the componentclassname for each component.
default.hst.component.class = org.hippoecm.hst.core.component.GenericHstComponent

# the maximum time in ms that a jcr session is not refreshed: this is the same for every pool. Default here is 5 minutes.
# Setting the value lower reduces memory, but also reduces performance
sessionPool.maxRefreshIntervalOnPassivate = 300000

# the maximum time in ms that a jcr session is not refreshed: this is the same for every lazy session. Default here is 5 minutes.
# Setting the value lower reduces memory, but also reduces performance
lazySession.maxRefreshIntervalOnCleanup = 300000

# Default Session Pool Configuration for 'hstconfigreader'.
hstconfigreader.repository.maxActive = 25
hstconfigreader.repository.maxIdle = 5
hstconfigreader.repository.minIdle = 0
hstconfigreader.repository.initialSize = 0
hstconfigreader.repository.maxWait = 10000
hstconfigreader.repository.whenExhaustedAction = block
hstconfigreader.repository.testOnBorrow = true
hstconfigreader.repository.testOnReturn = false
hstconfigreader.repository.testWhileIdle = false
hstconfigreader.repository.timeBetweenEvictionRunsMillis = 60000
hstconfigreader.repository.numTestsPerEvictionRun = 1
hstconfigreader.repository.minEvictableIdleTimeMillis = 300000
hstconfigreader.repository.refreshOnPassivate = true
hstconfigreader.repository.maxTimeToLiveMillis = 3600000

# Default Session Pool Configuration for 'live'.
default.repository.maxActive = 100
default.repository.maxIdle = 25
default.repository.minIdle = 0
default.repository.initialSize = 0
default.repository.maxWait = 10000
default.repository.whenExhaustedAction = block
default.repository.testOnBorrow = true
default.repository.testOnReturn = false
default.repository.testWhileIdle = false
default.repository.timeBetweenEvictionRunsMillis = 60000
default.repository.numTestsPerEvictionRun = 1
default.repository.minEvictableIdleTimeMillis = 300000
default.repository.refreshOnPassivate = true
default.repository.maxTimeToLiveMillis = 3600000

# Default Session Pool Configuration for 'preview'.
preview.repository.maxActive = 100
preview.repository.maxIdle = 5
preview.repository.minIdle = 0
preview.repository.initialSize = 0
preview.repository.maxWait = 10000
preview.repository.whenExhaustedAction = block
preview.repository.testOnBorrow = true
preview.repository.testOnReturn = false
preview.repository.testWhileIdle = false
preview.repository.timeBetweenEvictionRunsMillis = 60000
preview.repository.numTestsPerEvictionRun = 1
preview.repository.minEvictableIdleTimeMillis = 300000
preview.repository.refreshOnPassivate = true
preview.repository.maxTimeToLiveMillis = 3600000

# Default Session Pool Configuration for 'writable'.
writable.repository.maxActive = 100
writable.repository.maxIdle = 5
writable.repository.minIdle = 0
writable.repository.initialSize = 0
writable.repository.maxWait = 10000
writable.repository.whenExhaustedAction = block
writable.repository.testOnBorrow = true
writable.repository.testOnReturn = false
writable.repository.testWhileIdle = false
writable.repository.timeBetweenEvictionRunsMillis = 60000
writable.repository.numTestsPerEvictionRun = 1
writable.repository.minEvictableIdleTimeMillis = 300000
writable.repository.refreshOnPassivate = true
writable.repository.maxTimeToLiveMillis = 3600000

# Default Session Pool Configuration for 'binaries'.
binaries.repository.maxActive = 100
binaries.repository.maxIdle = 10
binaries.repository.minIdle = 0
binaries.repository.initialSize = 0
binaries.repository.maxWait = 10000
binaries.repository.whenExhaustedAction = block
binaries.repository.testOnBorrow = true
binaries.repository.testOnReturn = false
binaries.repository.testWhileIdle = false
binaries.repository.timeBetweenEvictionRunsMillis = 60000
binaries.repository.numTestsPerEvictionRun = 1
binaries.repository.minEvictableIdleTimeMillis = 300000
binaries.repository.refreshOnPassivate = true
binaries.repository.maxTimeToLiveMillis = 3600000

# the global user that should be able to read all configuration and retrieve all events
hstconfigreader.repository.address = vm://
hstconfigreader.repository.user.name = configuser
hstconfigreader.repository.pool.name = hstconfigreader
hstconfigreader.repository.password =

# session pooling repository for binary resource access
binaries.repository.address = vm://
binaries.repository.user.name = liveuser
binaries.repository.pool.name = binaries
binaries.repository.password =

# session pooling repository for default live site access. (typically disallowed on unpublished contents.)
default.repository.address = vm://
default.repository.user.name = liveuser
default.repository.pool.name = default
default.repository.password =

# session pooling repository for preview site access. (typically allowed on unpublished and published contents.)
preview.repository.address = vm://
preview.repository.user.name = previewuser
preview.repository.pool.name = preview
preview.repository.password =

# session pooling repository for write access
writable.repository.address = vm://
writable.repository.user.name = sitewriter
writable.repository.pool.name = writable
writable.repository.password =

# if not explicitly defined, the root path is '/hst:platform'
hst.configuration.rootPath = /hst:platform
repository.pool.counter.enabled = true

default.binaries.cache.maxEntries = 256
default.binaries.cache.statistics.enabled = true
default.binaries.cache.timeToLiveSeconds = 86400

pageCache.maxSize = 1000
pageCache.statistics.enabled = true
pageCache.timeToLiveSeconds = 3600
pageCache.clearOnContentChange = true
pageCache.clearOnHstConfigChange = true

webFileCache.maxSize = 1000
webFileCache.statistics.enabled = true
webFileCache.timeToLiveSeconds = 86400
# See com.google.common.cache.CacheBuilderSpec
negativeWebFileCacheBuilder.from=maximumSize=1000, expireAfterAccess=10m, expireAfterWrite=10m

default.hst.contentrewriter.class = org.hippoecm.hst.content.rewriter.impl.SimpleContentRewriter
linkrewriting.failed.path = /pagenotfound

# the dispatch url prefix where the web resource urls such as jsp's and freemarker templates can be invoked.
# Edit the following if you want to use different web resource url prefix for (non-slash-leading) relative dispatch urls.
dispatch.url.prefix = /WEB-INF/

#component.error.page = jsp/component-error-page.jsp
component.error.page =

repositoryProviderClassName = org.hippoecm.hst.core.jcr.pool.JcrHippoRepositoryProvider

# Since JDK 1.6, JMX is enabled by default.
management.connector.server.locate.existing = true
# the following property is deprecated because JVM 1.6 enables JMX by default
management.connector.server.objectName = connector:name=rmi

# Default 'disposable' Session Pool Configuration.
disposable.repository.maxActive = 5
disposable.repository.maxIdle = 5
disposable.repository.minIdle = 0
disposable.repository.initialSize = 0
disposable.repository.maxWait = 10000
disposable.repository.whenExhaustedAction = block
disposable.repository.testOnBorrow = true
disposable.repository.testOnReturn = false
disposable.repository.testWhileIdle = false
# check every 10 seconds for eviction -->
disposable.repository.timeBetweenEvictionRunsMillis = 10000
disposable.repository.numTestsPerEvictionRun = 1
#when a session is idle for just three minutes, we already dispose it to avoid to much memory consumption -->
disposable.repository.minEvictableIdleTimeMillis =180000
# whether we want to refresh faceted navigation views after any change in the repository. Performance is better when
# setting this to false
disposable.repository.refreshOnPassivate = true
#the maxRefreshIntervalOnPassivate must not be to low, as we do not want an entire faceted tree view to be refreshed -->
disposable.repository.maxRefreshIntervalOnPassivate = 300000

#This is the interval for evicting disposable session pools when all its sessions are evicted :
# default to 30 minutes checks
disposable.global.repository.timeBetweenEvictionRunsMillis = 1800000

container.request.path.suffix.delimiter = ./

# Resource Bundle document root path to which event listener listens
resource.bundles.rootPath = /content

### Hippo Login Module Authentication Provider configurations ###
## default properties for the RepositoryAuthenticationProvider ##
# optional required userrole to be allowed to authenticate
security.authentication.required.userrole =
# default excluded standard provided userroles (prefixed with xm.)
security.authentication.excluded.userrole.prefixes = xm.
# , delimiter separating multiple excluded userrole prefixes
security.authentication.excluded.userrole.prefixes.delimiter= ,
# default include only standard provided userroles (prefixed with xm.): effectively by default don't include any!
security.authentication.included.userrole.prefix = xm.
# by default strip the userrole prefix (if any) from the mapped role name
security.authentication.strip.included.userrole.prefix = true
# prefix to be added to produced role names (default no prefix added)
security.authentication.role.prefix =
## common/shared properties for all Authentication Provider beans ##
# default role to be added to anyone authenticated (if not already added): to be specified *without* possible role.prefix
security.authentication.default.role = everybody
## properties only used for the deprecated jcrAuthenticationProvider/HippoAuthenticationProvider ##
# the default domain name to use for querying and resolving role mappings
security.authentication.role.domain = everywhere

channel.manager.hostGroup = dev-localhost
channel.manager.sites = hst:sites

# the default location where the channel manager creates content from blueprints
channel.manager.contentRoot = /content/documents

# the default prefix of pathInfo URLs for the preview in the cms
cms.default.cmspreviewprefix = _cmsinternal

# default timeout milliseconds to acquire lock
default.blocking.cache.timeout = 30000

# default query range resolution to use. When missing, resolution will default to MILLISECOND which
# is the most precise but also very expensive
# Allowed values are year, month, day,hour
default.query.date.range.resolution = day

# flag whether the asynchronous component window rendering is enabled by default.
default.asynchronous.component.window.rendering.enabled = true
# default asynchronous component window rendering mode. e.g, 'ajax', 'esi', etc.
default.asynchronous.component.window.rendering.mode = ajax

# Default JavaScript code fragment template in java.text.MessageFormat format to load asynchronous components in a page on page loading time.
ajax.asynchronous.component.windows.load.js.fragment.template = {0}

# Flag whether or not ESI fragments should be processed in PageCachingValve by default
esi.default.fragments.processing = false

# Flag whether or not ESI fragments should be processed only when there are any asynchronous components for the request.
esi.processing.condition.async.components = true

cms.preview.security.delegation.enabled = true

object.converter.caching = true
caching.object.converter.maxsize = 100

# If set to true, a fallback to the root WebApplicationContext
component.fallback.root.web.application.context = false

# the classpath resource path for custom bean definitions to override HST core components
assembly.overrides = META-INF/hst-assembly/overrides/*.xml

# HST JAAS login configuration
java.security.auth.login.config = classpath:/org/hippoecm/hst/security/impl/login.conf

# HST Frontend Filter Related default properties
filter.prefix.exclusions = /ping/
filter.suffix.exclusions =

# by default, the page copy functionality is only enabled within the current channel. If set to true, pages can be
# copied cross channel as well.
cross.channel.page.copy.supported = false

# if set to true, the channel manager sitemap will skip xpages
channelmanager.sitemap.hide.xpages = false

form.data.flat.storage = true

sitemenu.externallink.omitJavascriptProtocol = true

uriencoding.default.charset = UTF-8
uriencoding.use.body.charset = false

# in next major version, flip default false to true for POST only allowed
container.actionValve.method.post.only = false

default.pagemodelapi.version = 0.9

pagemodel.callback.param = endpoint

# the name of the jwt token as query string parameter, for example ?token=xyz
jwt.token.param = token

# customizable name of the header which the HST uses to get the bearer token. If an endproject already uses
# the header 'Authorization' for for example Spring Security, via this property a different header can be used
jwt.token.authorization.header = Authorization

# if set to true, request that should never create an http session will log an error when a session is created
# nonetheless and the session will be invalidated again by the HST at the end of the request processing
# Default will be true for 15.0.0 / 100.2.0, for 14.2 default will be 'false' for backward compatibility (aka not
# start logging errors in 14.x)
hst.stateless.request.validation = false

# the property for the cookie  used for cluster node affinity. By default the used cookie name is 'serverid'. The
# value is used case-insensitive so serverid or serverId or SERVERID are all the same
cluster.node.affinity.cookie.name = serverid

# the property for the header used for cluster node affinity. By default the used header name is 'Server-Id'. Since
# header names are case-insensitive, it means 'Server-Id' or 'server-id' result in the same behavior
cluster.node.affinity.header.name = Server-Id

# the query param used for the cluster node affinity value
cluster.node.affinity.query.param = server-id


# it is not allowed to contains chars like ? or & since the param is used in a querystring

# Comma separated Search Engine or Bot User Agent regex patterns. All most be lowercase
search.engine.or.bot.user.agent.patterns = abachobot, accoona-ai-agent, addsugarspiderbot, adsbot-google,\
        anyapexbot, aolbuild, appengine-google, arachmo, baidu, bingpreview, b-l-i-t-z-b-o-t, becomebot, beslistbot,\
        billybobbot, bimbot, bingbot, blitzbot, boitho.com-dc, boitho.com-robot, bot, btbot,\
        catchbot, cerberian drtrs, charlotte, converacrawler, cosmos, covario-ids,\
        dataparksearch, diamondbot, digg deeper, discobot, dotbot, duckduckgo, earthcom.info, emeraldshield.com webbot,\
        envolk[its]spider, esperanzabot, exabot, fast enterprise crawler,\
        fast-webcrawler, fdse robot, findlinks, furlbot, fyberspider, g2crawler, gaisbot,\
        galaxybot, geniebot, gigabot, girafabot, googlebot, googlebot-image, googlebot-mobile,\
        googlebot-news, googlebot-video, gurujibot, happyfunbot, hl_ftien_spider,\
        holmes, htdig, iaskspider, ia_archiver, iccrawler, ichiro, igdespyder, irlbot,\
        issuecrawler, jaxified bot, jyxobot, koepabot, l.webis, lapozzbot, larbin,\
        ldspider, lexxebot, linguee bot, linkwalker, lmspider, lwp-trivial, mabontland,\
        magpie-crawler, mediapartners-google, mj12bot, mlbot, mnogosearch, mogimogi,\
        mojeekbot, moreoverbot, morning paper, msnbot, msrbot, mvaclient, mxbot, netresearchserver,\
        netseer crawler, newsgator, ng-search, nicebot, noxtrumbot, nusearch spider,\
        nutchcvs, nymesis, obot, oegp, omgilibot, omniexplorer_bot, oozbot, orbiter,\
        pagebiteshyperbot, peew, polybot, pompos, postpost, psbot, pycurl, qseero,\
        radian6, rampybot, rufusbot, sandcrawler, sbider, scoutjet, scrubby, searchsight,\
        seekbot, semanticdiscovery, sensis web crawler, 'seochat::bot', seznambot,\
        shim-crawler, shopwiki, shoula robot, silk, sitebot, snappy, sogou spider,\
        sosospider, speedy spider, sqworm, stackrambler, suggybot, surveybot, synoobot,\
        teoma, terrawizbot, thesubot, thumbnail.cz robot, tineye, truwogps, turnitinbot,\
        tweetedtimes bot, twengabot, updated, urlfilebot, vagabondo, voilabot, vortex,\
        voyager, vyu2, webcollage, websquash.com, wf84, wofindeich robot, womlpefactory,\
        xaldon_webspider, yacy, yahoo! slurp, yahoo! slurp china, yahooseeker, yahooseeker-testing,\
        yandex, yasaklibot, yeti, yodaobot, yooglifetchagent,\
        youdaobot, zao, zealbot, zspider, zyborg, abilogicbot, link valet, link validity check,\
        linkexaminer, linksmanager.com_bot, mojoo robot, notifixious, online link validator,\
        ploetz + zeller, reciprocal link system pro, rel link checker lite, sitebar, vivante link checker,\
        w3c-checklink, watchmouse, copperegg, revealuptime, bot/0.1, compspybot, feedfetcher-google, rogerbot,\
        sogou web spider, twitterbot, xenu link sleuth, crawler, spider,\
        scraper, bash, java, facebook, nutch, ruby, httpclient, optimizer, go 1.1 package,\
        megaindex, brokenlinkcheck, dlvr.it, ltx71, qwantify, python-urllib,\
        python-requests, google favicon, binlar, metauri, coccoc, disqus, xurl, netlyzer,\
        gigablastopensource, panscient, hubspot marketing grader, kimengi, libwww-perl, trove, typhoeus

# Extra Comma separated Search Engine or Bot User Agent regex patterns that could be added by end projects. All most be lowercase
search.engine.or.bot.user.agent.patterns.extra =
