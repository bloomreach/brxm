/*
 * Copyright 2008-2020 Bloomreach
 *
 * Licensed under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<nt='http://www.jcp.org/jcr/nt/1.0'>
<mix='http://www.jcp.org/jcr/mix/1.0'>
<hst='http://www.hippoecm.org/hst/nt/2.1'>
<hippo='http://www.onehippo.org/jcr/hippo/nt/2.0'>

[hst:descriptive] mixin
- hst:description (string)
+ hst:icon (hippo:resource) = hippo:resource

[hst:editable] mixin
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodifiedby (string)
- hst:state (string)

[hst:prototypemeta] mixin
// the name to show for the prototype
- hst:displayname (string)
// the relative path to primary container
- hst:primarycontainer (string)
// prototype level application id which should be copied into a sitemap item on creation.
- hst:applicationId (String)

[hst:template] > nt:base, mix:referenceable, hst:descriptive
- hst:renderpath (string)
- hst:isnamed (boolean)
- hst:containers (string) multiple
- hst:script (string)
- * (string)

[hst:templates] > nt:base, mix:referenceable
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
+ * (hst:template)

// page level generic metadata mixin
[hst:metadata] mixin
// Metadata names
- hst:metanames (string) multiple
// Metadata values
- hst:metavalues (string) multiple

[hst:abstractcomponent] > nt:base, mix:referenceable, hst:descriptive orderable
- hst:template (string)
- hst:resourcetemplate (string)
- hst:componentclassname (string)
- hst:parametersinfoclassname (string)
- hst:referencename (string)
- hst:page_errorhandlerclassname (string)
- hst:parameternames (string) multiple
- hst:parameternameprefixes (string) multiple
- hst:parametervalues (string) multiple
// whether the component is rendered in standalone mode during componentRendering URLs
// when not set, default value is true
- hst:standalone (boolean)
// whether the component is rendered in a separate http ajax request. Note that you can better not
// use hst:async  = true combined with hst:standalone = false, as then, all doBeforeRenders of
// all components will be invoked again for the async get. When not set, default async = false
- hst:async (boolean)
- hst:asyncmode (string)
- hst:cacheable (boolean)
- hst:suppresswastemessage (boolean)


[hst:containercomponentreference] > nt:base orderable
- hst:referencecomponent (string) mandatory

[hst:component] > hst:abstractcomponent orderable
- hst:referencecomponent (string)
- hst:lastmodified (date)
- hst:iconpath (string)
+ * (hst:containercomponentreference)
+ * (hst:abstractcomponent)

[hst:fieldconfig] abstract

[hst:jcrpath] > hst:fieldconfig
 - hst:pickerconfiguration (string)
 - hst:pickerinitialpath (string)
 - hst:pickerrememberslastvisited (boolean)
 - hst:pickerselectablenodetypes (string) multiple
 - hst:relative (boolean)
 - hst:pickerrootpath (String)

[hst:dropdown] > hst:fieldconfig
- hst:value (string) multiple
- hst:sourceid (string)
// This property represents a value list provider key
- hst:valuelistprovider (string)

[hst:dynamicparameter]
 - hst:required (boolean)
 - hst:valuetype (string)
 - hst:defaultvalue (string)
 - hst:displayname (string)
 - hst:hideinchannelmanager (boolean)
 + hst:fieldconfig (hst:fieldconfig)

[hst:componentdefinition]
 - hst:componentdefinition (string)
 - hst:componentclassname (string)
 - hst:template (string)
 - hst:ctype (string)
 - hst:xtype (string)
 - hst:iconpath (string)
 - hst:label (string)
 - hst:fieldgroups (string) multiple
//Should be used only for field group parameter
 - * (string) multiple
 + * (hst:dynamicparameter)

[hst:containeritemcomponent] > hst:abstractcomponent orderable
//A reference to a catalog item
- hst:componentdefinition (string)
- hst:xtype (string)
// the label of the hst:containeritemcomponent
- hst:label (string)
// icon path relative to the sites webapp
- hst:iconpath (string)
- hst:componentfiltertag (string)
+ * (hst:abstractcomponent)

[hst:containercomponent] > hst:abstractcomponent, hippo:identifiable orderable
- hst:xtype (string)
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
- hst:label (string)
+ * (hst:containeritemcomponent)

[hst:containeritempackage] > nt:base, mix:referenceable orderable
+ * (hst:containeritemcomponent)
+ * (hst:componentdefinition)

[hst:containercomponentfolder] > nt:base orderable
+ * (hst:containercomponentfolder)
+ * (hst:containercomponent)

[hst:catalog] > nt:base, mix:referenceable orderable
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
+ * (hst:containeritempackage)

[hst:components] > nt:base, mix:referenceable orderable
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
+ * (hst:abstractcomponent)


[hst:pages] > nt:base, mix:referenceable
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
+ * (hst:abstractcomponent)

[hst:xpage] > hst:component, hippostd:skipdraft
- hst:pageref (string)
- hst:label (string)

[hst:xpages] > nt:base, mix:referenceable
+ * (hst:xpage)


// the mixin to set on a document variant to support XPage below it
[hst:xpagemixin] > hippostdpubwf:audittrace mixin
+ hst:xpage (hst:xpage) = hst:xpage

[hst:sitemapitemhandler] > nt:base, mix:referenceable
- hst:sitemapitemhandlerclassname (string) mandatory
- * (string)
- * (string) multiple
- * (boolean)
- * (boolean) multiple
- * (long)
- * (long) multiple
- * (double)
- * (double) multiple
- * (date)
- * (date) multiple

[hst:sitemapitemhandlers] >  nt:base, mix:referenceable orderable
+ * (hst:sitemapitemhandler)

[hst:sitemapitem] > nt:base, mix:referenceable
- hst:value
- hst:relativecontentpath (string)
- hst:componentconfigurationid (string)
- hst:pagetitle (string)
- hst:sitemapitemhandlerids (string) multiple
- hst:parameternames (string) multiple
- hst:parametervalues (string) multiple
- hst:namedpipeline (string)
- hst:statuscode (long)
- hst:errorcode (long)
- hst:excludedforlinkrewriting (boolean)
- hst:authenticated (boolean)
- hst:roles (string) multiple
// refId must be unique within a single sitemap item tree. The property is optional
- hst:refId (string)
// in case of multiple kinds of applications within a single mount, like multiple SPAs, sitemap items can have an
// application id.
- hst:applicationId (String)
- hst:users (string) multiple
- hst:locale (string)
- hst:scheme (string)
- hst:schemenotmatchresponsecode (long)
- hst:schemeagnostic (boolean)
- hst:componentconfigurationmappingnames (string) multiple
- hst:componentconfigurationmappingvalues (string) multiple
- hst:cacheable (boolean)
- hst:resourcebundleid (string)
- hst:lastmodified (date)
// to indicate whether the sitemap item serves container resources like webapp css, js etc.
- hst:containerresource (boolean)
// boolean when set to false can be used to explicitly skip a sitemap item in pages overview in channel mngr.
- hst:hiddeninchannelmanager (boolean)
- hst:responseheaders (string) multiple
+ * (hst:sitemapitem)

[hst:sitemap] > nt:base, mix:referenceable
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
+ * (hst:sitemapitem)

[hst:sitemenuitem] > nt:base, mix:referenceable orderable
// sitemap item by path or by refid. This can be a path including wildcards when setting by path, but this cannot include wildcard when setting by refid.
- hst:referencesitemapitem (string)
- hst:externallink (string)
// if this sitemenu item should link to a specific mount, you can specify it through the mountalias below
- hst:mountalias (string)
- hst:foldersonly (boolean)
- hst:repobased (boolean)
- hst:depth (long)
- hst:roles (string) multiple
- hst:parameternames (string) multiple
- hst:parametervalues (string) multiple
+ * (hst:sitemenuitem)

[hst:sitemenu] > nt:base, mix:referenceable orderable
- hst:lastmodified (date)
+ * (hst:sitemenuitem)

[hst:sitemenus] > nt:base, mix:referenceable
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
+ * (hst:sitemenu)

[hst:channelinfo]
- * (string)
- * (string) multiple
- * (boolean)
- * (boolean) multiple
- * (long)
- * (long) multiple
- * (double)
- * (double) multiple
- * (date)
- * (date) multiple

[hst:channel] > nt:base, mix:referenceable
- hst:name (string)
- hst:channelinfoclass (string)
- hst:channelinfomixins (string) multiple
- hst:type (string)
- hst:defaultdevice (string)
- hst:devices (string) multiple
- hst:lockedby (string)
- hst:lockedon (date)
- hst:lastmodified (date)
- hst:lastmodifiedby (string)
- hst:deletable (boolean)
// properties of the channel
+ hst:channelinfo (hst:channelinfo)

[hst:workspace] > nt:base
+ hst:containers (hst:containercomponentfolder) = hst:containercomponentfolder
+ hst:sitemenus (hst:sitemenus) = hst:sitemenus
+ hst:abstractpages (hst:pages) = hst:pages
+ hst:pages (hst:pages) = hst:pages
+ hst:components (hst:components) = hst:components
+ hst:templates (hst:templates) = hst:templates
+ hst:sitemap (hst:sitemap) = hst:sitemap
+ hst:channel (hst:channel) = hst:channel

[hst:branch] mixin
- hst:branchof (string) mandatory
- hst:branchid (string) mandatory
+ hst:upstream (hst:workspace) = hst:workspace

[hst:configuration] > nt:base, mix:referenceable
- hst:inheritsfrom (string) multiple
// true if the entire configuration is locked
- hst:locked (boolean)
+ hst:components (hst:components) = hst:components
+ hst:abstractpages (hst:pages) = hst:pages
+ hst:pages (hst:pages) = hst:pages
+ hst:xpages (hst:xpages) = hst:xpages
+ hst:prototypepages (hst:pages) = hst:pages
+ hst:sitemap (hst:sitemap) = hst:sitemap
+ hst:templates (hst:templates) = hst:templates
+ hst:sitemenus (hst:sitemenus) = hst:sitemenus
+ hst:sitemapitemhandlers (hst:sitemapitemhandlers) = hst:sitemapitemhandlers
+ hst:catalog (hst:catalog) = hst:catalog
+ hst:workspace (hst:workspace) = hst:workspace
+ hst:channel (hst:channel) = hst:channel

[hst:configurations] > nt:base, mix:referenceable
+ * (hst:configuration) = hst:configuration version
+ hst:catalog (hst:catalog) = hst:catalog

[hst:site] > nt:base, mix:referenceable
+ hst:content (hippo:facetselect)
- hst:configurationpath (string)
- hst:version (long)
// absolute path
- hst:content (string)

[hst:sites] > nt:base, mix:referenceable
+ * (hst:site) = hst:site version

[hst:primarydomain] mixin

[hst:redirectdomain] mixin
- hst:redirect (string)


[hst:mount] > nt:base, mix:referenceable
+ * (hst:mount)
// the path to the (sub)site. for example /preview/myproject
- hst:mountpoint (string)
// whether this mount is associated with a hstSite
- hst:ismapped (boolean)
// if you do not want to mount to run with the default hst pipeline, you can configure the pipeline to be used here
- hst:namedpipeline (string)
- hst:showcontextpath (boolean)
// deprecated : hst:contextpath is not used any more
- hst:contextpath
- hst:scheme (string)
- hst:schemenotmatchresponsecode (long)
- hst:schemeagnostic (boolean)
// whether the port should be visible in the created urls
- hst:showport (boolean)
// the hst:defaultsitemapitemhandlerids that all sitemap items get that do not define their own hst:sitemapitemhandlerids
- hst:defaultsitemapitemhandlerids (string) multiple
- hst:parameternames (string) multiple
- hst:parametervalues (string) multiple
- hst:homepage (string)
- hst:pagenotfound (string)
- hst:locale (string)
- hst:versioninpreviewheader (boolean)
- hst:authenticated (boolean)
- hst:roles (string) multiple
- hst:users (string) multiple
// the alias of this mount. If not present, the alias is the current name
- hst:alias (string)
// the primary type of this mount, for example 'preview'. Default when missing is 'live'
- hst:type (string)
// the types this mount also belongs to, for example 'composer'.
- hst:types (string) multiple
// whether jcr session should be used per subject
- hst:subjectbasedsession (boolean)
// whether subject based jcr session should be statefully managed
- hst:sessionstateful (boolean)
// form login page for this site mount, to which the request can be redirected for non-authenticated user.
- hst:formloginpage (string)
// nochannelinfo can be used to exclude a certain (sub)mount that inherits
// the hst site from a parent mount but should not have the same channel info, for
// example because it is a rest api mount (that does use an hst sitemap)
- hst:nochannelinfo (boolean)
- hst:cacheable (boolean)
// to hold all the 'free defined properties'
- hst:defaultresourcebundleid (string)
- hst:responseheaders (string) multiple
// path element below which the page model api will become available
- hst:pagemodelapi (string)
- hst:linkurlprefix (string)
- * (string)

[hst:portmount] > nt:base, mix:referenceable
+ hst:root (hst:mount)

[hst:virtualhost] > nt:base, mix:referenceable
+ * (hst:virtualhost)
+ * (hst:portmount)
+ hst:root (hst:mount)
- hst:showcontextpath (boolean)
// whether the port should be visible in the created urls
- hst:showport (boolean)
- hst:scheme (string)
- hst:schemenotmatchresponsecode (long)
- hst:schemeagnostic (boolean)
// when customhttpssupport is true, a https request will always be processed, even if
// the matching indicated hst:scheme = http.
- hst:customhttpssupport (boolean)
- hst:parameternames (string) multiple
- hst:parametervalues (string) multiple
- hst:homepage (string)
- hst:pagenotfound (string)
- hst:locale (string)
- hst:versioninpreviewheader (boolean)
// deprecated : hst:contextpath is not used any more
- hst:contextpath
- hst:cacheable (boolean)
- hst:defaultresourcebundleid (string)
// For sitemap items that are marked to be a containerresource (and use ResourceDispatchingPipeline), then in non-channel-manager environment, the
// cndhost is used in the URL if configured. The value is allowed to contain the scheme (http/https) but preferred is to
// have it start with // so it piggybacks on the scheme of the current request
- hst:cdnhost (string)
- hst:responseheaders (string) multiple
// path element below which for every mount for this host (or sub host) the page model api will become available
- hst:pagemodelapi (string)
- hst:linkurlprefix (string)
- hst:allowedorigins (string) multiple

[hst:virtualhostgroup] > nt:base, mix:referenceable
// the fully qualified cms url, for example http://localhost:8080/cms
// Deprecated: Not used any more
- hst:cmslocation (string)
- hst:defaultport (long)
- hst:autohosttemplate (string) multiple // deprecated
+ * (hst:virtualhost)

[hst:virtualhosts] > nt:base, mix:referenceable
- hst:showcontextpath (boolean)
// whether the port should be visible in the created urls
- hst:showport (boolean)
- hst:scheme (string)
- hst:schemenotmatchresponsecode (long)
// deprecated : hst:defaulthostname usage will be dropped in 14.0.0
- hst:defaulthostname (string)
- hst:parameternames (string) multiple
- hst:parametervalues (string) multiple
- hst:homepage (string)
- hst:pagenotfound (string)
- hst:locale (string)
- hst:versioninpreviewheader (boolean)
// deprecated : hst:contextpath is not used any more
- hst:defaultcontextpath (string)
// Configurable override of the default _cmsinternal pathInfo prefix for the preview in the cms
- hst:cmspreviewprefix (string)
// the sites the channel manager should use: Default is 'hst:sites'
- hst:channelmanagersites (string)
- hst:diagnosticsenabled (boolean)
- hst:diagnosticsforips (string) multiple
// log / save the diagnostic tasks at most until depth level deep
- hst:diagnosticsdepth (long)
// only log in case the total request takes longer than the threshold
- hst:diagnosticsthresholdmillisec (long)
// only log in case a subtask takes not less than unit-threshold
- hst:diagnosticsunitthresholdmillisec (long)
- hst:cacheable (boolean)
- hst:defaultresourcebundleid (string)
// since 7.9 default is true when missing
- hst:channelmanagersiteauthenticationskipped (boolean)
+ * (hst:virtualhostgroup)

[hst:blueprint] > nt:base, mix:referenceable
//"User-friendly" Name of the Blueprint that is used in Channel Manager
- hst:name (string)
- hst:description (string)
// the absolute location where, if this blueprint contains content, the content is created. If missing
// the default contentRoot is used. It must start with a /
- hst:contentRoot (string)
// prototype for the channel properties.
// Used for default values
// deprecated : hst:contextpath is not used any more
- hst:contextpath (string)
+ hst:channel (hst:channel)
+ hst:configuration (hst:configuration)
+ hst:site (hst:site)
+ hst:mount (hst:mount)


[hst:blueprints] > nt:base, mix:referenceable
+ * (hst:blueprint)

[hst:hst] > nt:base, mix:referenceable
+ hst:configurations (hst:configurations) = hst:configurations version
+ hst:hosts (hst:virtualhosts) = hst:virtualhosts version
+ hst:blueprints (hst:blueprints) = hst:blueprints version
+ hst:domains (hipposys:federateddomainfolder) = hipposys:federateddomainfolder
+ * (hst:sites) = hst:sites version

// the hst nodetype for the contentmount's: this nodetype is for content sharing between subsites
[hst:contentshare] > hippo:mirror

[hst:formfieldvalue]
- hst:formfieldname (string) mandatory
- hst:formfielddata (string) multiple
- hst:formfieldmessages (string) multiple

[hst:formdata]
- hst:creationtime (date) mandatory
- hst:predecessor (string)
- hst:sealed (boolean)
// optional property pointing to the identifier of the backing form
- hst:formid (string)
+ hst:formfieldvalue (hst:formfieldvalue) multiple

[hst:formdatacontainer]
+ * (hst:formdatacontainer)
+ * (hst:formdata)
+ hst:domains (hipposys:federateddomainfolder) = hipposys:federateddomainfolder

[hst:formdatapayload] mixin
- hst:payload (string)



