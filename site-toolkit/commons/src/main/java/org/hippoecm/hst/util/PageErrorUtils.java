/*
 *  Copyright 2008-2013 Hippo B.V. (http://www.onehippo.com)
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.hippoecm.hst.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.hippoecm.hst.configuration.components.HstComponentInfo;
import org.hippoecm.hst.core.component.HstComponentException;
import org.hippoecm.hst.core.container.PageErrors;

/**
 * PageErrorUtils
 * 
 * @version $Id$
 */
public class PageErrorUtils {
    
    private PageErrorUtils() {
        
    }
    
    /**
     * Returns exceptions generated by a component specified by the class name.
     * If no exception found, then it returns an empty collection.
     * 
     * @param pageErrors
     * @param className
     * @return
     */
    public static Collection<HstComponentException> getExceptionsByComponentClassName(PageErrors pageErrors, String className) {
        for (HstComponentInfo componentInfo : pageErrors.getComponentInfos()) {
            if (componentInfo.getComponentClassName().equals(className)) {
                return pageErrors.getComponentExceptions(componentInfo);
            }
        }
        
        return Collections.emptyList();
    }
    
    /**
     * Returns exceptions generated by a component specified by the name.
     * If no exception found, then it returns an empty collection.
     * 
     * @param pageErrors
     * @param name
     * @return
     */
    public static Collection<HstComponentException> getExceptionsByComponentName(PageErrors pageErrors, String name) {
        for (HstComponentInfo componentInfo : pageErrors.getComponentInfos()) {
            if (componentInfo.getName().equals(name)) {
                return pageErrors.getComponentExceptions(componentInfo);
            }
        }
        
        return Collections.emptyList();
    }
    
    /**
     * Returns exceptions generated by a component specified by the id.
     * If no exception found, then it returns an empty collection.
     * 
     * @param pageErrors
     * @param id
     * @return
     */
    public static Collection<HstComponentException> getExceptionsByComponentId(PageErrors pageErrors, String id) {
        for (HstComponentInfo componentInfo : pageErrors.getComponentInfos()) {
            if (componentInfo.getId().equals(id)) {
                return pageErrors.getComponentExceptions(componentInfo);
            }
        }
        
        return Collections.emptyList();
    }
    
    /**
     * Returns all component infos which generated exceptions of the <CODE>causeType</CODE>.
     * 
     * @param pageErrors
     * @param causeType
     * @return
     */
    public static Collection<HstComponentInfo> getComponentInfosByCauseType(PageErrors pageErrors, Class<? extends Throwable> causeType) {
        List<HstComponentInfo> componentInfos = null;
        
        for (HstComponentInfo componentInfo : pageErrors.getComponentInfos()) {
            for (HstComponentException exception : pageErrors.getComponentExceptions(componentInfo)) {
                Throwable cause = exception.getCause();
                
                if (cause != null && causeType.isAssignableFrom(cause.getClass())) {
                    if (componentInfos == null) {
                        componentInfos = new ArrayList<HstComponentInfo>();
                    }
                    
                    componentInfos.add(componentInfo);
                    break;
                }
            }
        }
        
        if (componentInfos == null) {
            componentInfos = Collections.emptyList();
        }
        
        return componentInfos;
    }
    
    /**
     * Returns all exceptions which have the <CODE>causeType</CODE> and generated by a component of <CODE>componentInfo</CODE>. 
     * 
     * @param pageErrors
     * @param causeType
     * @return
     */
    public static Collection<HstComponentException> getExceptionsByCauseType(PageErrors pageErrors, HstComponentInfo componentInfo, Class<? extends Throwable> causeType) {
        List<HstComponentException> exceptions = null;
        
        for (HstComponentException exception : pageErrors.getComponentExceptions(componentInfo)) {
            Throwable cause = exception.getCause();
            
            if (cause != null && causeType.isAssignableFrom(cause.getClass())) {
                if (exceptions == null) {
                    exceptions = new ArrayList<HstComponentException>();
                }
                
                exceptions.add(exception);
            }
        }
        
        if (exceptions == null) {
            exceptions = Collections.emptyList();
        }
        
        return exceptions;
    }
    
    /**
     * Returns all exceptions which have the <CODE>causeType</CODE>.
     * 
     * @param pageErrors
     * @param causeType
     * @return
     */
    public static Collection<HstComponentException> getExceptionsByCauseType(PageErrors pageErrors, Class<? extends Throwable> causeType) {
        List<HstComponentException> exceptions = null;
        
        for (HstComponentException exception : pageErrors.getAllComponentExceptions()) {
            Throwable cause = exception.getCause();
            
            if (cause != null && causeType.isAssignableFrom(cause.getClass())) {
                if (exceptions == null) {
                    exceptions = new ArrayList<HstComponentException>();
                }
                
                exceptions.add(exception);
            }
        }
        
        if (exceptions == null) {
            exceptions = Collections.emptyList();
        }
        
        return exceptions;
    }
    
}
