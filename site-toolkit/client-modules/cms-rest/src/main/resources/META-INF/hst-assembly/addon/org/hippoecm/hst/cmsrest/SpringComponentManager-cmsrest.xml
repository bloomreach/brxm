<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011-2017 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

  <bean id="annotationJsonSerializer" class="org.hippoecm.hst.rest.custom.AnnotationJsonSerializer">
    <constructor-arg type="java.lang.Class" value="java.lang.annotation.Annotation" />
  </bean>

  <bean id="cmsRestJacksonJsonModuleVersion" class="com.fasterxml.jackson.core.util.VersionUtil" factory-method="parseVersion">
    <constructor-arg value="${project.version}" />
    <constructor-arg value="${project.groupId}" />
    <constructor-arg value="${project.artifactId}" />
  </bean>

  <bean id="cmsRestJacksonJsonModule" class="com.fasterxml.jackson.databind.module.SimpleModule">
    <constructor-arg value="CmsRestJacksonJsonModule" />
    <constructor-arg>
      <ref bean="cmsRestJacksonJsonModuleVersion" />
    </constructor-arg>
  </bean>

  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="com.fasterxml.jackson.databind.module.SimpleModule" />
    <property name="targetObject" ref="cmsRestJacksonJsonModule" />
    <property name="targetMethod" value="addSerializer" />
    <property name="arguments">
      <ref bean="annotationJsonSerializer" />
    </property>
  </bean>

  <bean id="cmsRestJsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
    <property name="mapper" ref="cmsRestJacksonObjectMapper" />
  </bean>

  <bean id="channelExceptionMapper" class="org.hippoecm.hst.cmsrest.providers.exception.mappers.ChannelExceptionMapper" />

  <bean id="cmsRestJacksonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />

  <!-- Enable Jackson JSON ObjectMapper default typing -->
  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="com.fasterxml.jackson.databind.module.SimpleModule" />
    <property name="targetObject" ref="cmsRestJacksonObjectMapper" />
    <property name="targetMethod" value="enableDefaultTyping" />
  </bean>

  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="com.fasterxml.jackson.databind.ObjectMapper" />
    <property name="targetObject" ref="cmsRestJacksonObjectMapper" />
    <property name="targetMethod" value="enableDefaultTypingAsProperty" />
    <property name="arguments">
      <list>
        <value type="com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping">OBJECT_AND_NON_CONCRETE</value>
        <value>@class</value>
      </list>
    </property>
  </bean>

  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="com.fasterxml.jackson.databind.ObjectMapper" />
    <property name="targetObject" ref="cmsRestJacksonObjectMapper" />
    <property name="targetMethod" value="registerModule" />
    <property name="arguments">
      <ref bean="cmsRestJacksonJsonModule" />
    </property>
  </bean>

  <bean id="channelFilter" class="com.google.common.base.Predicates" factory-method="and">
    <constructor-arg ref="allChannelFilters"/>
  </bean>

  <bean id="allChannelFilters" class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="java.util.List" />
    <property name="targetClass" value="org.apache.commons.collections.ListUtils" />
    <property name="targetMethod" value="union" />
    <property name="arguments">
      <list>
        <ref bean="defaultChannelFilters" />
        <ref bean="customChannelFilters" />
      </list>
    </property>
  </bean>

  <!-- Default system channel filters be added here. -->
  <bean id="defaultChannelFilters" class="org.springframework.beans.factory.config.ListFactoryBean">
    <property name="sourceList">
      <list>
        <bean id="contentBasedChannelFilter" class="org.hippoecm.hst.cmsrest.filter.ContentBasedChannelFilter"/>
      </list>
    </property>
  </bean>

  <!-- Custom channel filters may be overriden in their project specific assembly. -->
  <bean id="customChannelFilters" class="org.springframework.beans.factory.config.ListFactoryBean">
    <property name="sourceList">
      <list>
      </list>
    </property>
  </bean>

  <bean id="baseResource" abstract="true">
    <property name="channelManager" ref="org.hippoecm.hst.configuration.channel.ChannelManager"/>
    <property name="channelFilter" ref="channelFilter"/>
  </bean>

  <bean id="org.hippoecm.hst.rest.DocumentService" class="org.hippoecm.hst.cmsrest.services.DocumentsResource" parent="baseResource">
    <property name="hstLinkCreator" ref="org.hippoecm.hst.core.linking.HstLinkCreator"/>
  </bean>

  <bean id="jaxrsCmsRestCxfServerFactoryBean" class="org.apache.cxf.jaxrs.JAXRSServerFactoryBean">
    <property name="address" value="/" />
    <property name="providers">
      <list>
        <ref bean="cmsRestJsonProvider" />
        <ref bean="channelExceptionMapper" />
      </list>
    </property>
    <property name="resourceProviders">
      <list>
        <bean class="org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider">
          <constructor-arg>
            <ref bean="org.hippoecm.hst.rest.DocumentService"/>
          </constructor-arg>
        </bean>
        <bean class="org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider">
          <constructor-arg>
            <bean class="org.hippoecm.hst.cmsrest.services.ChannelsResource" parent="baseResource"/>
          </constructor-arg>
        </bean>
        <bean class="org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider">
          <constructor-arg>
            <bean class="org.hippoecm.hst.cmsrest.services.BlueprintsResource"  parent="baseResource"/>
          </constructor-arg>
        </bean>
        <bean class="org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider">
          <constructor-arg>
            <bean class="org.hippoecm.hst.cmsrest.services.SitesResource" parent="baseResource"/>
          </constructor-arg>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="jaxrsCmsRestService" class="org.hippoecm.hst.jaxrs.cxf.CXFJaxrsService">
    <constructor-arg value="jaxrsCmsRestService"/>
    <property name="servletPath" value=""/>
    <property name="jaxrsServerFactoryBean" ref="jaxrsCmsRestCxfServerFactoryBean"/>
  </bean>

  <!-- Pipelining -->
  
  <bean id="jaxrsCmsRestServiceValve" class="org.hippoecm.hst.core.container.JaxrsRestServiceValve">
    <property name="valveName" value="jaxrsCmsRestServiceValve" />
    <constructor-arg ref="jaxrsCmsRestService"/>
  </bean>

  <bean id="cmsRestSecurityValve" class="org.hippoecm.hst.cmsrest.container.CmsRestSecurityValve">
    <property name="valveName" value="cmsRestSecurityValve" />
    <property name="repository" ref="javax.jcr.Repository.delegating"/>
  </bean>

  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="org.hippoecm.hst.core.container.Pipeline" />
    <property name="targetObject">
      <bean class="org.springframework.beans.factory.config.PropertyPathFactoryBean">
        <property name="targetObject" ref="org.hippoecm.hst.core.container.Pipelines" />
        <property name="propertyPath" value="pipelines"/>
      </bean>
    </property>
    <property name="targetMethod" value="put" />
    <property name="arguments">
      <list>
        <value>CmsRestPipeline</value>
        <bean class="org.hippoecm.hst.core.container.HstSitePipeline">
          <property name="initializationValves">
            <list>
              <ref bean="initializationValve" />
              <ref bean="cmsHostRestRequestContextValve"/>
              <ref bean="cmsRestSecurityValve"/>
            </list>
          </property>
          <property name="processingValves">
            <list>
              <ref bean="noCacheResponseHeadersValve" />
              <ref bean="jaxrsCmsRestServiceValve" />
            </list>
          </property>
          <property name="cleanupValves">
            <list>
              <ref bean="diagnosticReportingValve" />
              <ref bean="cleanupValve" />
            </list>
          </property>
        </bean>
      </list>
    </property>
  </bean>

  <!-- configure that call to the programmatic creation of the _cmsrest Mount for Host 127.0.0.1 -->
  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="java.lang.Void" />
    <property name="targetObject" ref="org.hippoecm.hst.configuration.model.HstManager"/>
    <property name="targetMethod" value="addHstConfigurationAugmenter"/>
    <property name="arguments">
      <bean class="org.hippoecm.hst.core.hosting.CustomMountAndVirtualHostAugmenter">
        <property name="customMountName" value="_cmsrest"/>
        <property name="customHostName" value="127.0.0.1"/>
        <property name="customMountNamedPipeline" value="CmsRestPipeline"/>
        <!--
          the type must be 'preview' as the links that are created through the CMS rest mount need to
          be done against preview site map configurations
        -->
        <property name="customMountType" value="preview"/>
      </bean>
    </property>
  </bean>

  <bean class="org.hippoecm.hst.site.container.TypeDeterminedMethodInvokingFactoryBean">
    <constructor-arg value="java.lang.Void" />
    <property name="targetObject" ref="org.hippoecm.hst.configuration.model.HstManager"/>
    <property name="targetMethod" value="addHstConfigurationAugmenter"/>
    <property name="arguments">
      <bean class="org.hippoecm.hst.core.hosting.CustomMountAndVirtualHostAugmenter">
        <property name="customMountName" value="_cmsrest"/>
        <property name="customHostName" value="[::1]"/>
        <property name="customMountNamedPipeline" value="CmsRestPipeline"/>
        <!--
          the type must be 'preview' as the links that are created through the CMS rest mount need to
          be done against preview site map configurations
        -->
        <property name="customMountType" value="preview"/>
      </bean>
    </property>
  </bean>

</beans>
